type ExamExerciseAnswer {
  id: ID!
  name: String!,
  description: String
  descriptionUrl: String
  correct: Boolean
  selected: Boolean
}

type ExamExercise {
  id: ID!
  name: String!
  description: String
  descriptionUrl: String
  points: Float!
  answers: [ExamExerciseAnswer]!
}

type Exam {
  id: ID!
  name: String!
  examTemplateId: ID!
  exercises: [ExamExercise]
  created: String!
  updated: String
  completed: Boolean
  idNumber: String!
  courseId: ID!
  courseName: String!
  score: Float
}

type Exams {
  data: [Exam]
  count: Int!
}

input AnswerPerExercise {
  exerciseId: String!
  answerId: String!
}

extend type Query {
  getExam(id: ID!): Exam
  listExams(idNumber: ID, courseId: ID, completed: Boolean): Exams
}

extend type Mutation {
  createExam(assignedExamId: ID! examTemplateId: ID!, idNumber: String!): Exam
  finishExam(id: ID!, answerPerExerciseList: [AnswerPerExercise]!): Exam
}